/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.regitiny.catiny.uaa.web.deepapi;

import io.swagger.annotations.*;
import org.regitiny.catiny.uaa.service.dto.MasterDTO;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@Validated
@Api(value = "master", description = "The deep master API (use for local services)", produces = "application/json", consumes = "application/json", tags = "api-deep-master")
@RequestMapping("/api/deep/master")
public interface MasterDeepApi
{


  /**
   * GET /api/deep/master/ : Get master
   * Get a master by messageId
   *
   * @param userName  (required)\
   * @param groupId   (required)\
   * @param companyId (required)\
   * @return master (status code 200)
   * or master not found (status code 404)
   * or Validation exception (status code 405)
   */
  @ApiOperation(value = "Get master", nickname = "getMasterByUserNameGroupIdCompanyId", notes = "Get a master by userId, groupId , companyId")
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "get master successful"),
    @ApiResponse(code = 404, message = "master not found"),
    @ApiResponse(code = 405, message = "Validation exception")})
  @GetMapping(value = "", produces = "application/json")
  ResponseEntity<MasterDTO> getMasterByUserName_G_C(
    @ApiParam(name = "userName", type = "String", value = "the user name of master", example = "meo9x", required = true) @RequestParam String userName,
    @ApiParam(name = "groupId", type = "Long", value = "groupId of the user in master", example = "0", required = false) @RequestParam(required = false) Long groupId,
    @ApiParam(name = "companyId", type = "Long", value = "the companyId of the user in master", example = "0", required = false) @RequestParam(required = false) Long companyId);


  /**
   * GET /api/deep/master/{masterId}: Get master
   * Get a master by messageId
   *
   * @param masterId (required)
   * @return master (status code 200)
   * or Invalid ID supplied (status code 400)
   * or master not found (status code 404)
   * or Validation exception (status code 405)
   */
  @ApiOperation(value = "Get master", nickname = "getMasterByMasterId", notes = "Get a master by masterId")
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "get master successful"),
    @ApiResponse(code = 400, message = "Invalid ID supplied"),
    @ApiResponse(code = 404, message = "Master not found"),
    @ApiResponse(code = 405, message = "Validation exception")})
  @GetMapping(value = "/{masterId}", produces = "application/json")
  ResponseEntity<MasterDTO> getMasterByMasterId(
    @ApiParam(name = "masterId", type = "UUID", value = "Id of the master", example = "8bbb78f3-2ec4-4dab-b3d5-3e333cfd214a", required = true) @PathVariable UUID masterId);//, @ApiParam(value = "Content to edit") @Valid @RequestBody(required = false) Message body);
}
